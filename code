import RPi.GPIO as GPIO
import time

# GPIO Mode (BOARD / BCM)
GPIO.setmode(GPIO.BCM)

# Ultrasonic sensor pins
GPIO_TRIGGER = 18
GPIO_ECHO = 25

# IR sensor pins
sen = 16
sens = 26

# Motor control pins
in1, in2, in3, in4 = 24, 23, 27, 22
en1, en2 = 27, 4

# Set up Ultrasonic sensor
GPIO.setup(GPIO_TRIGGER, GPIO.OUT) #it acts mostly as transmitter
GPIO.setup(GPIO_ECHO, GPIO.IN) #it acts mostly as receiver

# Set up IR sensors
GPIO.setup(sen, GPIO.IN)
GPIO.setup(sens, GPIO.IN)

# Motor control setup
GPIO.setup(in1, GPIO.OUT)
GPIO.setup(in2, GPIO.OUT)
GPIO.setup(en1, GPIO.OUT)
GPIO.output(in1, GPIO.LOW)
GPIO.output(in2, GPIO.LOW)

GPIO.setup(in3, GPIO.OUT)
GPIO.setup(in4, GPIO.OUT)
GPIO.setup(en2, GPIO.OUT)
GPIO.output(in3, GPIO.LOW)
GPIO.output(in4, GPIO.LOW)
p = GPIO.PWM(en2, 1)
p.start(25) #starts with a duty cycle of 25%

print("IR Sensor Ready.....")
print(" ")

print("\n")
print("The default speed & direction of the motor is LOW & Forward.....")
print("r-run s-stop f-forward b-backward l-low m-medium h-high e-exit")
print("\n")

def distance():
    # set Trigger to HIGH
    GPIO.output(GPIO_TRIGGER, True)
    # set Trigger after 0.01ms to LOW
    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER, False)
    StartTime = time.time()
    StopTime = time.time()
    # save StartTime
    while GPIO.input(GPIO_ECHO) == 0:
        StartTime = time.time()
    # save time of arrival
    while GPIO.input(GPIO_ECHO) == 1:
        StopTime = time.time()
    # time difference between start and arrival
    TimeElapsed = StopTime - StartTime
    # multiply with the sonic speed (34300 cm/s)
    # and divide by 2, because there and back
    distance = (TimeElapsed * 34300) / 2
    return distance

try:
    while True:
        if GPIO.input(sen) == 0:
            if GPIO.input(sens) == 0:
                print(GPIO.input(sens))
                print("No object")
                GPIO.output(in1, GPIO.LOW)
                GPIO.output(in2, GPIO.LOW)
                GPIO.output(in3, GPIO.LOW)
                GPIO.output(in4, GPIO.LOW)
                time.sleep(0.1)
        elif GPIO.input(sen) == 1:
            if GPIO.input(sens) == 1:
                print("Object Detected")
                dist = distance()
                print("Measured Distance = %.1f cm" % dist)
                if dist > 20:
                    print("front")
                    GPIO.output(in1, GPIO.HIGH)
                    GPIO.output(in2, GPIO.LOW)
                    GPIO.output(in3, GPIO.HIGH)
                    GPIO.output(in4, GPIO.LOW)
                    time.sleep(0.1)
                elif dist < 20:
                    print("stop")
                    GPIO.output(in1, GPIO.LOW)
                    GPIO.output(in2, GPIO.LOW)
                    GPIO.output(in3, GPIO.LOW)
                    GPIO.output(in4, GPIO.LOW)
                    time.sleep(0.1)
        elif GPIO.input(sen) == 1:
            if GPIO.input(sens) == 0:
                print("left")
                GPIO.output(in1, GPIO.HIGH)
                GPIO.output(in2, GPIO.LOW)
                GPIO.output(in3, GPIO.LOW)
                GPIO.output(in4, GPIO.LOW)
                time.sleep(0.1)
        elif GPIO.input(sen) == 0:
            if GPIO.input(sens) == 1:
                print("right")
                GPIO.output(in1, GPIO.LOW)
                GPIO.output(in2, GPIO.LOW)
                GPIO.output(in3, GPIO.HIGH)
                GPIO.output(in4, GPIO.LOW)
                time.sleep(0.1)

except KeyboardInterrupt:
    GPIO.cleanup()
